version: 2

jobs:
  build:
    machine: true
    docker_layer_caching: false
#    docker:
#      # specify the version
#      - image: circleci/golang:1.9
    #working_directory: /go/src/github.com/lotharschulz/hellogodocker

    working_directory: ~/go/src/github.com/lotharschulz/hellogodocker
    steps:
      - checkout

      - run:
          name: Build service
          command: make
#      - setup_remote_docker:
#          docker_layer_caching: false
      - run: go get -v -t -d ./...
      - run: go test -v ./...
      - run:
          name: enable experimental docker deamon functionality
          command: |
            sudo sh -c 'echo '\''DOCKER_OPTS="--experimental=true"'\'' >> /etc/default/docker'
            sudo service docker restart
        # docker build
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: docker command build
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            time docker build -t dockerhub/hellogo:$TAG . 
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.docker
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: make build.docker
          command: |
            time make build.docker
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.docker-cache
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: make build.docker-cache
          command: |
            time make build.docker-cache
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.dockerbuilder
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: make build.dockerbuilder
          command: |
            time make build.dockerbuilder
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.dockerbuilder-cache
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: make build.dockerbuilder-cache
          command: |
            time make build.dockerbuilder-cache
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.dockerbuilder-nocache
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: make build.dockerbuilder-nocache
          command: |
            time make build.dockerbuilder-nocache
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.dockerbuilder-squash
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: build.dockerbuilder-squash
          command: |
            time build.dockerbuilder-squash
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.dockerbuilder-compress
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: build.dockerbuilder-compress
          command: |
            time build.dockerbuilder-compress
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.docker-min
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: build.docker-min
          command: |
            time build.docker-min
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.docker-min-nocache
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: build.docker-min-nocache
          command: |
            time build.docker-min-nocache
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.docker-min-squash
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: build.docker-min-squash
          command: |
            time build.docker-min-squash
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
        # build.docker-min-compress
      - run:
          name: docker pull golang & alpine base image
          command: |
            docker pull golang:1.10.3
            docker pull alpine:latest
      - run:
          name: build.docker-min-compress
          command: |
            time build.docker-min-compress
      - run:
          name: docker clean
          command: |
            docker rmi -f $(docker images -q)
